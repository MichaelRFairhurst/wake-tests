#>
# Source Code for the Original Compiler for the
# Programming Language Wake
#
# BehavioralProvisionTest.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Michael Fairhurst
# Revised By:
#
##
module wktest;

import wunit.Asserts;

@TestClass
every BehavioralProvisionTest is:

	with Int provideme = 0;
	with Text providemetext = "";

	provides
		Int:ProvideMe <- { return provideme; },
		Text:ProvideMe <- { return providemetext; },
		Int:changeProperties <- { provideme = 2; providemetext = "hello"; return 4; },
		Int:ProvideProvideMe <- { return Int:ProvideMe from this; },
		Text:ProvideProvideMe <- { return Text:ProvideMe from this; },
		Text:ProvideArg1 <- (Text, $Text) { return Text; },
		Text:ProvideArg2 <- (Text, $Text) { return $Text; },
		Text:ProvideAdded <- (Text, $Text) { return Text + $Text; };

	@Test
	~[ test get property via provision/declaration after set ]~(Asserts) {
		provideme = 10;
		var Int:ProvideMe from this;
		Asserts.that(Int)Equals(10);
	}

	@Test
	~[ test get property via provision (no declaration) after set ]~(Asserts) {
		provideme = 7;
		Asserts.that(Int:ProvideMe from this)Equals(7);
	}

	@Test
	~[ test get text property via provision/declaration after set ]~(Asserts) {
		providemetext = "Heey";
		var Text:ProvideMe from this;
		Asserts.that(Text)Equals("Heey");
	}

	@Test
	~[ test get text property via provision (no declaration) after set ]~(Asserts) {
		providemetext = "Yo";
		Asserts.that(Text:ProvideMe from this)Equals("Yo");
	}

	@Test
	~[ test get property via provision/declaration calls other provision after set ]~(Asserts) {
		provideme = 10;
		var Int:ProvideProvideMe from this;
		Asserts.that(Int)Equals(10);
	}

	@Test
	~[ test get property via provision (no declaration) calls other provision after set ]~(Asserts) {
		provideme = 7;
		Asserts.that(Int:ProvideProvideMe from this)Equals(7);
	}

	@Test
	~[ test get text property via provision/declaration calls other provision after set ]~(Asserts) {
		providemetext = "Heey";
		var Text:ProvideProvideMe from this;
		Asserts.that(Text)Equals("Heey");
	}

	@Test
	~[ test get text property via provision (no declaration) calls other provision after set ]~(Asserts) {
		providemetext = "Yo";
		Asserts.that(Text:ProvideProvideMe from this)Equals("Yo");
	}

	@Test
	~[ test set properties in a provision ]~(Asserts) {
		Int:changeProperties from this;
		var Int:ProvideMe from this;
		Asserts.that(provideme)Equals(2);
		Asserts.that(providemetext)Equals("hello");
	}

	@Test
	~[ test provide arg 1 gets arg 1 and ignores arg 2 ]~(Asserts) {
		Asserts.that(Text:ProvideArg1("hey", "man") from this)Equals("hey");
	}

	@Test
	~[ test provide arg 2 gets arg 2 and ignores arg 1 ]~(Asserts) {
		Asserts.that(Text:ProvideArg2("hey", "man") from this)Equals("man");
	}

	@Test
	~[ test provide args added ]~(Asserts) {
		Asserts.that(Text:ProvideAdded("hey", "man") from this)Equals("heyman");
	}
