#>
# Source Code for the Original Compiler for the
# Programming Language Wake
#
# ForeachTest.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Michael Fairhurst
# Revised By:
#
##
module wktest;

import wunit.Asserts;

@TestClass
every ForeachTest is:

	@Test
	~[ test empty loop never enters foreach ]~(Asserts) {
		var Int[] = [];
		var Bool = false;

		foreach Int[] {
			Bool = true;
		}

		Asserts.that(Bool)Equals(false);
	}

	@Test
	~[ test loop with values executes with each once ]~(Asserts) {
		var Int[] = [1, 2, 3];
		var $Int[] = [];

		foreach Int[] {
			$Int[].push(Int);
		}

		Asserts.that($Int[].getSize())Equals(3);
		Asserts.that($Int[0])Equals(1);
		Asserts.that($Int[1])Equals(2);
		Asserts.that($Int[2])Equals(3);
	}

	@Test
	~[ test loop with values aren't references ]~(Asserts) {
		var Int[] = [0, 1, 2];

		foreach Int[] {
			Int += 2;
		}

		Asserts.that(Int[0])Equals(0);
		Asserts.that(Int[1])Equals(1);
		Asserts.that(Int[2])Equals(2);
	}

	@Test
	~[ test loop that inserts still executes with all ]~(Asserts) {
		var Int = 0;
		var Bool[] = [true, false, false, true];

		foreach Bool[] {
			if(Bool) {
				Bool[].push(false);
				Bool[].push(false);
			}
			Int += 1;
		}

		Asserts.that(Int)Equals(8);
	}

	@Test
	~[ test foreach over statement only happens once ]~(Asserts) {
		var Int[] copy = [];
		foreach getIntArray() {
			copy.push(Int);
		}

		Asserts.that(counter)Equals(1);
		Asserts.that(copy[0])Equals(0);
		Asserts.that(copy[1])Equals(1);
		Asserts.that(copy[2])Equals(2);
	}

	with Int counter = 0;
	Int[] -- getIntArray() {
		counter += 1;
		var Int[] = [0, 1, 2];
		return Int[];
	}

	@Test
	~[ test can iterate over an array twice ]~(Asserts) {
		var Int[] = [];
		foreach Int[] { }
		foreach Int[] { }
	}

	@Test
	~[ test foreach as alias sets value properly in var ]~(Asserts) {
		var Int[] copy = [];
		var Int[] = [0, 1, 2];
		foreach i in Int[] {
			copy.push(i);
		}

		Asserts.that(copy[0])Equals(0);
		Asserts.that(copy[1])Equals(1);
		Asserts.that(copy[2])Equals(2);
	}

	@Test
	~[ test foreach as class sets value properly in var ]~(Asserts) {
		var Int[] copy = [];
		var Int[] = [0, 1, 2];
		foreach Int in Int[] {
			copy.push(Int);
		}

		Asserts.that(copy[0])Equals(0);
		Asserts.that(copy[1])Equals(1);
		Asserts.that(copy[2])Equals(2);
	}

	@Test
	~[ test foreach as shadow sets value properly in var ]~(Asserts) {
		var Int[] copy = [];
		var Int[] = [0, 1, 2];
		foreach $Int in Int[] {
			copy.push($Int);
		}

		Asserts.that(copy[0])Equals(0);
		Asserts.that(copy[1])Equals(1);
		Asserts.that(copy[2])Equals(2);
	}

	@Test
	~[ test foreach at tracks runs ]~(Asserts) {
		var $Int = 0;
		var $$Int[] = [0, 1, 2];
		foreach $$Int[] at Int {
			$Int = $Int + 1;
		}

		Asserts.that($Int)Equals(3);

		foreach $$Int in $$Int[] at Int {
			$Int = $Int + 1;
		}

		Asserts.that($Int)Equals(6);
	}

	@Test
	~[ test foreach at tracks indexes properly ]~(Asserts) {
		var $Int = 0;
		var $$Int[] = [0, 1, 2];
		foreach $$Int[] at Int {
			Asserts.that(Int)Equals($Int);
			$Int = $Int + 1;
		}
	}

	@Test
	~[ test foreach in at tracks indexes properly ]~(Asserts) {
		var Int[] = [0, 1, 2];
		foreach $Int in Int[] at Int {
			Asserts.that(Int)Equals($Int);
		}
	}

	@Test
	~[ test foreach at tracks indexes properly when shadowed ]~(Asserts) {
		var Int = 0;
		var $$Int[] = [0, 1, 2];
		foreach $$Int[] at $Int {
			Asserts.that(Int)Equals($Int);
			Int = Int + 1;
		}
	}

	@Test
	~[ test foreach in at tracks indexes properly when shadowed ]~(Asserts) {
		var Int[] = [0, 1, 2];
		foreach Int in Int[] at $Int {
			Asserts.that(Int)Equals($Int);
		}
	}

	@Test
	~[ test foreach at tracks indexes properly when aliased ]~(Asserts) {
		var Int = 0;
		var $Int[] = [0, 1, 2];
		foreach $Int[] at i {
			Asserts.that(Int)Equals(i);
			Int = Int + 1;
		}
	}

	@Test
	~[ test foreach in at tracks indexes properly when aliased ]~(Asserts) {
		var Int[] = [0, 1, 2];
		foreach Int in Int[] at i {
			Asserts.that(Int)Equals(i);
		}
	}
