#>
# Source Code for the Original Compiler for the
# Programming Language Wake
#
# ForeachTest.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Michael Fairhurst
# Revised By:
#
##
module wktest;

import wunit.Asserts;

@TestClass
every ForeachTest is:

	@Test
	~[ test empty loop never enters foreach ]~(Asserts) {
		var Num[] = [];
		var Bool = false;

		foreach Num[] {
			Bool = true;
		}

		Asserts.that(Bool)Equals(false);
	}

	@Test
	~[ test loop with values executes with each once ]~(Asserts) {
		var Num[] = [1, 2, 3];
		var $Num[] = [];

		foreach Num[] {
			$Num[].push(Num);
		}

		Asserts.that($Num[].getSize())Equals(3);
		Asserts.that($Num[0])Equals(1);
		Asserts.that($Num[1])Equals(2);
		Asserts.that($Num[2])Equals(3);
	}

	@Test
	~[ test loop with values aren't references ]~(Asserts) {
		var Num[] = [0, 1, 2];

		foreach Num[] {
			Num += 2;
		}

		Asserts.that(Num[0])Equals(0);
		Asserts.that(Num[1])Equals(1);
		Asserts.that(Num[2])Equals(2);
	}

	@Test
	~[ test loop that inserts still executes with all ]~(Asserts) {
		var Num = 0;
		var Bool[] = [true, false, false, true];

		foreach Bool[] {
			if(Bool) {
				Bool[].push(false);
				Bool[].push(false);
			}
			Num += 1;
		}

		Asserts.that(Num)Equals(8);
	}

	@Test
	~[ test foreach over statement only happens once ]~(Asserts) {
		var Num[] copy = [];
		foreach getNumArray() {
			copy.push(Num);
		}

		Asserts.that(counter)Equals(1);
		Asserts.that(copy[0])Equals(0);
		Asserts.that(copy[1])Equals(1);
		Asserts.that(copy[2])Equals(2);
	}

	with Num counter = 0;
	Num[] -- getNumArray() {
		counter += 1;
		var Num[] = [0, 1, 2];
		return Num[];
	}

	@Test
	~[ test can iterate over an array twice ]~(Asserts) {
		var Num[] = [];
		foreach Num[] { }
		foreach Num[] { }
	}

	@Test
	~[ test foreach as alias sets value properly in var ]~(Asserts) {
		var Num[] copy = [];
		var Num[] = [0, 1, 2];
		foreach num in Num[] {
			copy.push(num);
		}

		Asserts.that(copy[0])Equals(0);
		Asserts.that(copy[1])Equals(1);
		Asserts.that(copy[2])Equals(2);
	}

	@Test
	~[ test foreach as class sets value properly in var ]~(Asserts) {
		var Num[] copy = [];
		var Num[] = [0, 1, 2];
		foreach Num in Num[] {
			copy.push(Num);
		}

		Asserts.that(copy[0])Equals(0);
		Asserts.that(copy[1])Equals(1);
		Asserts.that(copy[2])Equals(2);
	}

	@Test
	~[ test foreach as shadow sets value properly in var ]~(Asserts) {
		var Num[] copy = [];
		var Num[] = [0, 1, 2];
		foreach $Num in Num[] {
			copy.push($Num);
		}

		Asserts.that(copy[0])Equals(0);
		Asserts.that(copy[1])Equals(1);
		Asserts.that(copy[2])Equals(2);
	}

	@Test
	~[ test foreach at tracks runs ]~(Asserts) {
		var $Num = 0;
		var $$Num[] = [0, 1, 2];
		foreach $$Num[] at Num {
			$Num = $Num + 1;
		}

		Asserts.that($Num)Equals(3);

		foreach $$Num in $$Num[] at Num {
			$Num = $Num + 1;
		}

		Asserts.that($Num)Equals(6);
	}

	@Test
	~[ test foreach at tracks indexes properly ]~(Asserts) {
		var $Num = 0;
		var $$Num[] = [0, 1, 2];
		foreach $$Num[] at Num {
			Asserts.that(Num)Equals($Num);
			$Num = $Num + 1;
		}
	}

	@Test
	~[ test foreach in at tracks indexes properly ]~(Asserts) {
		var Num[] = [0, 1, 2];
		foreach $Num in Num[] at Num {
			Asserts.that(Num)Equals($Num);
		}
	}

	@Test
	~[ test foreach at tracks indexes properly when shadowed ]~(Asserts) {
		var Num = 0;
		var $$Num[] = [0, 1, 2];
		foreach $$Num[] at $Num {
			Asserts.that(Num)Equals($Num);
			Num = Num + 1;
		}
	}

	@Test
	~[ test foreach in at tracks indexes properly when shadowed ]~(Asserts) {
		var Num[] = [0, 1, 2];
		foreach Num in Num[] at $Num {
			Asserts.that(Num)Equals($Num);
		}
	}

	@Test
	~[ test foreach at tracks indexes properly when aliased ]~(Asserts) {
		var Num = 0;
		var $Num[] = [0, 1, 2];
		foreach $Num[] at num {
			Asserts.that(Num)Equals(num);
			Num = Num + 1;
		}
	}

	@Test
	~[ test foreach in at tracks indexes properly when aliased ]~(Asserts) {
		var Num[] = [0, 1, 2];
		foreach Num in Num[] at num {
			Asserts.that(Num)Equals(num);
		}
	}
