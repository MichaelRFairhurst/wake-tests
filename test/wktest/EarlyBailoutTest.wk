#>
# Source Code for the Original Compiler for the
# Programming Language Wake
#
# EarlyBailoutTest.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Michael Fairhurst
# Revised By:
#
##

module wktest;

import wunit.Asserts;

@TestClass
every EarlyBailoutTest is:

	provides Tree <- Tree(?Int);

	@Test
	~[ test basic member access exists ]~(Asserts) {
		var Tree? = Tree(5) from this;
		var Int? = Tree.?Int;

		if Int exists {
			Asserts.that(Int)Equals(5);
		} else {
			Asserts.fail("Int didn't exist");
		}
	}

	@Test
	~[ test basic method call exists ]~(Asserts) {
		var Tree? = Tree(5) from this;
		var Int? = Tree.?getInt();

		if Int exists {
			Asserts.that(Int)Equals(5);
		} else {
			Asserts.fail("Int didn't exist");
		}
	}

	@Test
	~[ test basic member access not exists ]~(Asserts) {
		var Tree? = nothing;
		var Int? = Tree.?Int;

		if Int exists {
			Asserts.fail("Int shouldn't exist");
		}
	}

	@Test
	~[ test basic method call not exists ]~(Asserts) {
		var Tree? = nothing;
		var Int? = Tree.?getInt();

		if Int exists {
			Asserts.fail("Int shouldn't exist");
		}
	}

	@Test
	~[ test complex member access not exists ]~(Asserts) {
		var Tree? = nothing;
		var Int? = Tree.?left.?Int;

		if Int exists {
			Asserts.fail("Int shouldn't exist");
		}

		Tree = Tree(5) from this;
		Int = Tree.?left.?Int;

		if Int exists {
			Asserts.fail("Int shouldn't exist");
		}
	}

	@Test
	~[ test complex method call not exists ]~(Asserts) {
		var Tree? = nothing;
		var Int? = Tree.?getLeft().?getInt();

		if Int exists {
			Asserts.fail("Int shouldn't exist");
		}

		Tree = Tree(5) from this;
		Int = Tree.?getLeft().?getInt();

		if Int exists {
			Asserts.fail("Int shouldn't exist");
		}
	}

	@Test
	~[ test complex member access exists ]~(Asserts) {
		var Tree? = Tree(5) from this;
		if Tree exists {
			Tree.left = Tree(6) from this;
		}

		var Int? = Tree.?left.?Int;

		if Int exists {
			Asserts.that(Int)Equals(6);
		} else {
			Asserts.fail("Int didn't exist");
		}
	}

	@Test
	~[ test complex method call exists ]~(Asserts) {
		var Tree? = Tree(5) from this;
		if Tree exists {
			Tree.left = Tree(6) from this;
		}

		var Int? = Tree.?getLeft().?getInt();

		if Int exists {
			Asserts.that(Int)Equals(6);
		} else {
			Asserts.fail("Int didn't exist");
		}
	}

	@Test
	~[ test early bailout doesn't cause side-effects twice when not exists ]~(Asserts) {
		calls = 0;
		getOptionalWithSideeffects(false).?orMaxOf(5);
		Asserts.that(calls)Equals(1);
	}

	~[ test early bailout doesn't cause side-effects twice when exists ]~(Asserts) {
		calls = 0;
		getOptionalWithSideeffects(true).?orMaxOf(5);
		Asserts.that(calls)Equals(1);
	}

	with Int calls = 0;

	Int? -- getOptionalWithSideeffects(Bool returnNothing) {
		calls += 1;
		return nothing if returnNothing else 4;
	}

every Tree is:

	needs public Int;
	with public Tree? left = nothing;
	with public Tree? right = nothing;

	Int -- getInt() {
		return Int;
	}

	Tree? -- getLeft() {
		return left;
	}

	Tree? -- getRight() {
		return right;
	}
