#>
# Source Code for the Original Compiler for the
# Programming Language Wake
#
# ForLoopTest.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Michael Fairhurst
# Revised By:
#
##
module wktest;

import wunit.Asserts;

@TestClass
every ForLoopTest is:

	@Test
	~[test first statement executes when condition is false]~(Asserts) {
		var Int = 0;
		for(Int = 1; false; 0) { }
		Asserts.that(Int)Equals(1);
	}

	@Test
	~[test first statement executes when condition is true]~(Asserts) {
		var Int = 0;
		var Bool = true;
		for(Int = 1; Bool; Bool = false) { }
		Asserts.that(Int)Equals(1);
	}

	@Test
	~[test loop body never executes when condition is false]~(Asserts) {
		for(0; false; 0) {
			Asserts.fail("The loop body shouldn't have executed");
		}
	}

	@Test
	~[test third statement never executes when condition is false]~(Asserts) {
		for(0; false; Asserts.fail("The third statement should not have executed")) { }
	}

	@Test
	~[test third statement never executes when loop breaks]~(Asserts) {
		for(0; true; Asserts.fail("The third statement should not have executed")) {
			break;
		}
	}

	@Test
	~[test third statement executes when loop continues]~(Asserts) {
		var Bool = false;
		var loop = true;
		for(0; loop; Bool = true) {
			loop = false;
			continue;
		}
	}

	@Test
	~[test second statement executes once per loop try]~(Asserts) {
		var loops = 0;
		var counter = 10;
		for(0; (counter -= 1) != 0; 0) {
			loops += 1;
		}

		Asserts.that(loops)Equals(9);
	}

	@Test
	~[test third statement executes once per loop]~(Asserts) {
		var loops = 0;
		var counter = 10;
		for(0; (counter -= 1) != 0; loops += 1) {}

		Asserts.that(loops)Equals(9);
	}

	@Test
	~[test first statement executes only once despite loops]~(Asserts) {
		var loops = 10;
		var counter = 0;
		for(counter += 1; (loops -= 1) != 0; 0) {}

		Asserts.that(counter)Equals(1);
	}

	@Test
	~[test after continue never executes]~(Asserts) {
		var loop Bool = true;
		for(0; loop; 0) {
			loop = false;
			continue;
			Asserts.fail("Shouldn't have reached here...");
		}
	}

	@Test
	~[ test break stops loop ]~(Asserts) {
		while(true) {
			break;
			Asserts.fail("Didn't break in loop");
			return;
		}
	}
