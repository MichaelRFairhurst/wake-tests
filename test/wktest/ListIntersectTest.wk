#>
# Source Code for the Original Compiler for the
# Programming Language Wake
#
# ListIntersectTest.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Michael Fairhurst
# Revised By:
#
##
module wktest;

import wunit.Asserts;

@TestClass
every ListIntersectTest is:

	@Test
	~[ test intersect empty int list with empty int list is empty int list ]~(Asserts) {
		var Int[] = [];
		Asserts.that(Int[].intersect(Int[]).getSize())Equals(0);
	}

	@Test
	~[ test intersect empty text list with empty text list is empty text list ]~(Asserts) {
		var Text[] = [];
		Asserts.that(Text[].intersect(Text[]).getSize())Equals(0);
	}

	@Test
	~[ test intersect empty int list with nonempty int list is empty int list ]~(Asserts) {
		var Int[] = [];
		var $Int[] = [4];
		Asserts.that($Int[].intersect(Int[]).getSize())Equals(0);
		Asserts.that(Int[].intersect($Int[]).getSize())Equals(0);
	}

	@Test
	~[ test intersect empty text list with nonempty text list is empty text list ]~(Asserts) {
		var Text[] = [];
		var $Text[] = ["hey"];
		Asserts.that($Text[].intersect(Text[]).getSize())Equals(0);
		Asserts.that(Text[].intersect($Text[]).getSize())Equals(0);
	}

	@Test
	~[ test intersect nonempty int list with nonempty int list is nonempty int list ]~(Asserts) {
		var Int[] = [5];
		var $Int[] = [5];
		Asserts.that(Int[].intersect($Int[]).getSize())Equals(1);
		Asserts.that(Int[].intersect($Int[])[0])Equals(5);
		Asserts.that($Int[].intersect(Int[]).getSize())Equals(1);
		Asserts.that($Int[].intersect(Int[])[0])Equals(5);
	}

	@Test
	~[ test intersect nonempty text list with nonempty text list is nonempty text list ]~(Asserts) {
		var Text[] = ["hey"];
		var $Text[] = ["hey"];
		Asserts.that(Text[].intersect($Text[]).getSize())Equals(1);
		Asserts.that(Text[].intersect($Text[])[0])Equals("hey");
		Asserts.that($Text[].intersect(Text[]).getSize())Equals(1);
		Asserts.that($Text[].intersect(Text[])[0])Equals("hey");
	}

	@Test
	~[ test intersect different int lists with no commonality is empty list ]~(Asserts) {
		var Int[] = [1, 2];
		var $Int[] = [3, 4];
		Asserts.that(Int[].intersect($Int[]).getSize())Equals(0);
		Asserts.that($Int[].intersect(Int[]).getSize())Equals(0);
	}

	@Test
	~[ test intersect different text lists with no commonality is empty list ]~(Asserts) {
		var Text[] = ["one", "two"];
		var $Text[] = ["three", "four"];
		Asserts.that(Text[].intersect($Text[]).getSize())Equals(0);
		Asserts.that($Text[].intersect(Text[]).getSize())Equals(0);
	}

	@Test
	~[ test intersect same int lists but different orders returns both ]~(Asserts) {
		var Int[] = [0, 1];
		var $Int[] = [1, 0];

		Asserts.that(Int[].intersect($Int[]).getSize())Equals(2);
		Asserts.that(Int[].intersect($Int[])[0])Equals(0);
		Asserts.that(Int[].intersect($Int[])[1])Equals(1);
		Asserts.that($Int[].intersect(Int[]).getSize())Equals(2);
		Asserts.that($Int[].intersect(Int[])[0])Equals(1);
		Asserts.that($Int[].intersect(Int[])[1])Equals(0);
	}

	@Test
	~[ test intersect same text lists but different orders returns both ]~(Asserts) {
		var Text[] = ["hey", "yo"];
		var $Text[] = ["yo", "hey"];

		Asserts.that(Text[].intersect($Text[]).getSize())Equals(2);
		Asserts.that(Text[].intersect($Text[])[0])Equals("hey");
		Asserts.that(Text[].intersect($Text[])[1])Equals("yo");
		Asserts.that($Text[].intersect(Text[]).getSize())Equals(2);
		Asserts.that($Text[].intersect(Text[])[0])Equals("yo");
		Asserts.that($Text[].intersect(Text[])[1])Equals("hey");
	}

	@Test
	~[ test intersect two common ints are kept ]~(Asserts) {
		var Int[] = [0, 1, 2];
		var $Int[] = [3, 1, 2];
		Asserts.that(Int[].intersect($Int[]).getSize())Equals(2);
		Asserts.that(Int[].intersect($Int[])[0])Equals(1);
		Asserts.that(Int[].intersect($Int[])[1])Equals(2);
		Asserts.that($Int[].intersect(Int[]).getSize())Equals(2);
		Asserts.that($Int[].intersect(Int[])[0])Equals(1);
		Asserts.that($Int[].intersect(Int[])[1])Equals(2);
	}

	@Test
	~[ test intersect two common texts are kept ]~(Asserts) {
		var Text[] = ["zero", "one", "two"];
		var $Text[] = ["three", "one", "two"];
		Asserts.that(Text[].intersect($Text[]).getSize())Equals(2);
		Asserts.that(Text[].intersect($Text[])[0])Equals("one");
		Asserts.that(Text[].intersect($Text[])[1])Equals("two");
		Asserts.that($Text[].intersect(Text[]).getSize())Equals(2);
		Asserts.that($Text[].intersect(Text[])[0])Equals("one");
		Asserts.that($Text[].intersect(Text[])[1])Equals("two");
	}
